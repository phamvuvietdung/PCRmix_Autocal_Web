from flask import Flask, render_template, request, jsonify
import os
import pandas as pd  # üîπ B·ªï sung import Pandas
from pyngrok import ngrok # ngrok ƒë·ªÉ ch·∫°y local tunnel

app = Flask(__name__)

# ƒê·ªãnh nghƒ©a th∆∞ m·ª•c l∆∞u database
DATABASE_FOLDER = "database"
if not os.path.exists(DATABASE_FOLDER):
    os.makedirs(DATABASE_FOLDER)

# Trang ch√≠nh (Mix ph·∫£n ·ª©ng)
@app.route("/")
def mix_page():
    return render_template("mix.html")

# H√†m l·∫•y danh s√°ch file CSV trong th∆∞ m·ª•c database
def get_csv_files():
    return [f.replace(".csv", "") for f in os.listdir(DATABASE_FOLDER) if f.endswith(".csv")]

# API load danh s√°ch ch·ªâ ti√™u
@app.route("/get_chi_tieu", methods=["GET"])
def get_chi_tieu():
    list_database = get_csv_files()
    return jsonify(list_database)

# API load d·ªØ li·ªáu t·ª´ file CSV
@app.route("/load_data", methods=["POST"])
def load_data():
    try:
        chi_tieu = request.json.get("chi_tieu")
        so_pu = request.json.get("so_pu", 1)  # M·∫∑c ƒë·ªãnh 1 n·∫øu kh√¥ng c√≥ gi√° tr·ªã
        so_pu_ic = request.json.get("so_pu_ic", 1)  # M·∫∑c ƒë·ªãnh 1 n·∫øu kh√¥ng c√≥ gi√° tr·ªã

        # Ki·ªÉm tra ƒë·∫ßu v√†o h·ª£p l·ªá
        if not chi_tieu:
            return jsonify({"status": "error", "message": "T√™n ch·ªâ ti√™u kh√¥ng h·ª£p l·ªá!"})

        # Ki·ªÉm tra file CSV c√≥ t·ªìn t·∫°i kh√¥ng
        file_path = os.path.join(DATABASE_FOLDER, f"{chi_tieu}.csv")
        if not os.path.exists(file_path):
            return jsonify({"status": "error", "message": "Kh√¥ng t√¨m th·∫•y file d·ªØ li·ªáu!"})

        # ƒê·ªçc d·ªØ li·ªáu t·ª´ file CSV
        df = pd.read_csv(file_path).fillna("-")  # Thay th·∫ø NaN b·∫±ng "-"

        # üîπ Ki·ªÉm tra s·ªë c·ªôt n·∫øu 2 c·ªôt th√¨ ch·ªâ nh√¢n c·ªôt B, c√≤n 3 c·ªôt th√¨ nh√¢n c·ªôt B v√† C
        if df.shape[1] < 3:
            # return jsonify({"status": "error", "message": "File kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng!"})
            df.iloc[:, 1] = pd.to_numeric(df.iloc[:, 1], errors="coerce").fillna(0) * float(so_pu)  # Nh√¢n c·ªôt B v·ªõi s·ªë ph·∫£n ·ª©ng

        # üîπ Th·ª±c hi·ªán t√≠nh to√°n mastermix:
        else:
            df.iloc[:, 1] = pd.to_numeric(df.iloc[:, 1], errors="coerce").fillna(0) * float(so_pu)  # Nh√¢n c·ªôt B v·ªõi s·ªë ph·∫£n ·ª©ng
            df.iloc[:, 2] = pd.to_numeric(df.iloc[:, 2], errors="coerce").fillna(0) * float(so_pu_ic)  # Nh√¢n c·ªôt C v·ªõi s·ªë PU IC

        # üîπ L·∫•y danh s√°ch t√™n c·ªôt ƒë·ªông
        column_names = df.columns.tolist()
        
        # Chuy·ªÉn k·∫øt qu·∫£ th√†nh danh s√°ch ƒë·ªÉ g·ª≠i v·ªÅ frontend
        data = df.values.tolist()

        return jsonify({"status": "success", "columns": column_names, "data": data})

    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

# Trang "Th√™m ch·ªâ ti√™u"
@app.route("/add")
def add_page():
    return render_template("add.html")

if __name__ == "__main__":
    app.run(debug=True)
    
    # Ch·∫°y Ngrok
    public_url = ngrok.connect(5000)
    print(f"Ngrok URL: {public_url}")